#!/usr/bin/env bash
#/ Consul Locking Utility
#/
#/ Locks a particular process against the entire datacenter.  Once a lock is
#/ obtained, another command is executed.  When the other command is finished,
#/ the lock is released.
#/
#/ This is useful for tasks that you want to execute on only one machine at
#/ a time, such as boostrapping mongo databases into a cluster or a
#/ continually running process that can not scale horizontally.
#/
#/ -h, --help - Shows this help message.
#/ --no-wait  - Do not wait for a lock, exit immediately if it is not obtained.
#/ DEBUG      - Set this environment variable to see more debug output.
#/ $1         - Name of service to lock
#/ $2-$@      - Arguments to pass to the service
#/
#/ Examples:
#/
#/   # Run the mysql-bootstrap script when we have a lock on "mysql".
#/   consul-locker mysql ./mysql-bootstrap
#/
#/   # Debug output enabled:
#/   DEBUG=true consul-locker mysql ./mysql-bootstrap
#/
#/ This requires `curl` and `jq` to be installed on the system.
#/
#/ Returns a code from the following table:
#/   0 - Everything succeeded.
#/   1 - Curl or jq are not installed.
#/   2 - Invalid option or missing arguments
#/   3 - Unable to communicate with consul or errors when using HTTP API.
#/   4 - Problem parsing JSON or finding values in JSON.
#/   5 - Not enough settings or invalid configuration detected.


# Confirm that curl and jq are installed.
#
# Returns true on success.
checkForNecessaryCommands() {
    local result

    result=0
    clDebug "Checking for necessary commands"

    if ! hash curl > /dev/null 2>&1; then
        echo "Curl not found on the system." >&2
        result=1
    fi

    if ! hash jq > /dev/null 2>&1; then
        echo "Jq is not installed on the system." >&2
        result=1
    fi

    return $result
}


# Confirm that enough things were passed on the command line.
#
# Returns true on success.
checkForNecessarySettings() {
    local result

    result=0
    clDebug "Checking configuration"

    if [[ -z "$serviceScript" ]]; then
        echo "Must pass both a service name and a script / program to execute." >&2
        result=5
    fi

    return $result
}


# Writes a message to stderr if DEBUG is set to a non-empty value.
clDebug() {
    if [[ -n "${DEBUG-}" ]]; then
        echo "$*" >&2
    fi
}


# Remove locks and sessions in Consul.
cleanupTrap() {
    clDebug "Cleanup trap fired"
    consulLockDestroy
    consulSessionDestroy
}


# Writes data to Consul through the HTTP API
#
# $1 - Remainder of URL.
#
# Returns 3 on error.
consulDelete() {
    local curlCommand

    clDebug "DELETE $consulEndpoint$1 : ${2-}"
    curl -L -f -s -X DELETE "$consulEndpoint$1" || {
        echo "Unable to communicate with consul" >&2
        return 3
    }
}


# Releases a lock.
consulLockDestroy() {
    local result

    if [[ -z "$sessionId" ]]; then
        clDebug "No session assigned, no service lock obtained"
        return
    fi

    clDebug "Releasing lock for $serviceName"
    result=$(consulDelete "kv/consul-locker-$serviceName?acquire=$sessionId" || :)
    clDebug "$result"
}


# Gets a lock or dies trying.
consulLockObtain() {
    local data result

    clDebug "Obtaining lock for $serviceName"
    data=$(hostname)
    result=$(consulPut "kv/consul-locker-$serviceName?acquire=$sessionId" "$data")
    clDebug "$result"

    if [[ "$result" != "true" ]] && [[ "$noWait" == "true" ]]; then
        clDebug "--no-wait set to true, exiting."
        return 1
    fi

    while [[ "$result" != "true" ]]; do
        sleep 2
        result=$(consulPut "kv/consul-locker-$serviceName?acquire=$sessionId" "$data")
        clDebug "$result"
    done
}


# Writes data to Consul through the HTTP API.
#
# $1 - Remainder of URL.
# $2 - Data to pass.
#
# Returns 3 on error.
consulPut() {
    local curlCommand

    clDebug "PUT $consulEndpoint$1 : ${2-}"
    curl -L -f -s -X PUT --data "${2-}" "$consulEndpoint$1" || {
        echo "Unable to communicate with consul" >&2
        return 3
    }
}


# Destroys the current session.
#
# Returns 3 on error due to consulPut's return code.
consulSessionDestroy() {
    local result

    if [[ -z "$sessionId" ]]; then
        clDebug "No session found to destroy"
        return
    fi

    clDebug "Destroying session $sessionId"
    result=$(consulPut "session/destroy/$sessionId")
    clDebug "$result"
}


# Pings the session renewal endpoint.
#
# Returns 3 on error due to consulPut's return code.
consulSessionRenew() {
    local result

    clDebug "Renewing session $sessionId"
    result=$(consulPut "session/renew/$sessionId" || :)
    clDebug "$result"
}


# Creates a session in Consul, storing the result in $sessionId
#
# Returns 3 if HTTP errors, 4 if jq errors.
createSession() {
    local id result

    clDebug "Creating a session"
    result=$(consulPut 'session/create' '{"Name":"consul-lock $service","TTL":"15s"}')
    clDebug "$result"
    id=$(echo "$result" | jq -r .ID || return 4)
    clDebug "Extracted ID $id"
    sessionId=$id
}


# Disables the strict mode, or at least enough to catch return codes.
disableStrictMode() {
    clDebug "Disabling strict mode"
    set +eEu +o pipefail
}


# Enables a sort of "strict mode" for bash.
enableStrictMode() {
    clDebug "Enabling strict mode"
    set -eEu -o pipefail
    IFS=$'\n\t'
}


# Handles all argument processing.  Sets global variables.
#
# Returns 2 if there are problems parsing the arguments.
parseArguments() {
    local myself

    clDebug "Parsing arguments"
    myself=$1
    serviceScript=()
    shift

    # Handle options first
    while [[ "$#" -gt 0 ]] && [[ -z "$serviceName" ]]; do
        case "$1" in
            -h | --help)
                grep "^#/" "$myself" | cut -b 4-
                exit 0
                ;;
            --no-wait)
                noWait="true"
                ;;
            -*)
                echo "Unknown option: $1" >&2
                exit 2
                ;;

            *)
                serviceName=$1
                ;;
        esac

        shift
    done

    serviceScript=("$@")

    if [[ ${#serviceScript[@]} -eq 0 ]]; then
        echo "Missing a script to execute" >&2
        exit 2
    fi
}


# Runs two processes.  The first one continually hits the session renewal
# endpoint.  The second does the work.  When the second one terminates, the
# first one is killed.
#
# $1 - The function to execute or the script/program to run.
#
# Returns the status from the second job.
renewWhileRunning() {
    local realProcess renewProcess returnCode

    clDebug "Renewing the session while running: ""$@"

    # Run everything in a subshell to enable monitoring
    (
        # The renewal job
        (
            while true; do
                consulSessionRenew
                sleep 10
            done
        ) &
        renewProcess=$!

        # The real job we want to execute
        (
            "$@"
        ) &
        realProcess=$!

        disableStrictMode
        wait $realProcess > /dev/null 2>&1
        returnCode=$?
        enableStrictMode
        kill "$renewProcess"
        clDebug "Return code: $returnCode"
        return $returnCode
    )
}


consulEndpoint=http://localhost:8500/v1/
serviceName=
serviceScript=
sessionId=
noWait=

# Preparation
enableStrictMode
parseArguments "$0" "$@"
checkForNecessaryCommands
checkForNecessarySettings
trap cleanupTrap EXIT
createSession

# Get the lock and run the program
renewWhileRunning consulLockObtain
renewWhileRunning "${serviceScript[@]}"
